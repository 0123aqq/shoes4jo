<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="memberMapper">

	<!-- MemberVO로 조회 결과 저장할 resultMap 정의 -->
	<resultMap id="memResult" type="MemberVO">
		<result column="member_id" property="member_id" />
		<result column="member_name" property="member_name" />
		<result column="member_pw" property="member_pw" />
		<result column="signup_date" property="signup_date" />
		<result column="member_email" property="member_email" />
		<result column="member_phone" property="member_phone" />
		<result column="admin_check" property="admin_check" />
	</resultMap>


	<!-- result property, column은 memberVO에서 쓸 sql 컬럼명이랑 DB컬럼명들 맞추는거(column이원래 
		DB 컬럼명) resultMap 타입 속성에 HashMap도 있는데(여러 정보 처리) HashMap사용할땐 타입에 MemberVO대신 
		HashMap쓰고 sql문 실행 시 레코드의 컬럼 이름을 key로 지정하고 값을 value로 해서 HashMap에 차례대로 저장함(856p) 
		이렇게 씀 <resultMap id="MemResult" type="java.util.HashMap"> <result property="member_id"column="member_id"/> 
		<result property="member_name" column="member_name"/><result property="member_pw" 
		column="member_pw"/> <result property="signup_date"column="signup_date"/> 
		</resultMap> -->


	<!-- select태그의 id속성은 MemberDAO(회원정보 DB연동하는 클래스)에서 SQL문을 구분해서 호출하기 위한 용도로사용되고 
		반환되는 레코드를 id가 memberResultMap인 resultMap에 저장한다 id로 MemberDAO에서 접근할때사용 할 sql문의 
		id를 지정하고 parameterType으로 속성 지정하고 sql문으로 조회한 결과(여기선 아이디,아이디니까 문자열) 호출한 메서드로 
		반환한다 -->

 
<select id="showMember" resultMap="memResult">
    SELECT * FROM shoes_4jo.member
</select>
 

	<insert id="insertMember"
		parameterType="com.multi.shoes4jo.vo.MemberVO">

<![CDATA[
        insert into shoes_4jo.member(member_id, member_name, member_pw, signup_date,member_email, member_phone)
        values(#{member_id}, #{member_name}, #{member_pw}, NOW(), #{member_email}, #{member_phone})
    ]]>
	</insert>


	<select id="loginMember"
		parameterType="com.multi.shoes4jo.vo.MemberVO" resultType="int">SELECT
		count(*) FROM shoes_4jo.member WHERE member_id =#{member_id} AND
		member_pw = #{member_pw}
	</select>

	<select id="memberInfo"
		parameterType="com.multi.shoes4jo.vo.MemberVO" resultMap="memResult">SELECT * FROM
		shoes_4jo.member WHERE member_id =#{member_id}
	</select>


	<update id="updateMember"
		parameterType="com.multi.shoes4jo.vo.MemberVO">

<![CDATA[
	     update shoes_4jo.member
	     set member_name=#{member_name}, member_pw=#{member_pw}
	     , member_email=#{member_email},member_phone=#{member_phone}
	     where
	     member_id=#{member_id}
      ]]>
	</update>

	<delete id="deleteMember"
		parameterType="com.multi.shoes4jo.vo.MemberVO">
<![CDATA[
   delete from shoes_4jo.member
   where
   member_id=#{member_id}
]]>
	</delete>

	<!-- 아이디 중복 검사 -->
	<select id="duplicationId"
		parameterType="com.multi.shoes4jo.vo.MemberVO" resultType="int">

<![CDATA[
		SELECT count(*) cnt FROM shoes_4jo.member
		WHERE member_id = #{member_id} 
      ]]>
	</select>


	<select id="memberIdSearch"
		parameterType="com.multi.shoes4jo.vo.MemberVO" resultMap="memResult">
<![CDATA[
    select * from shoes_4jo.member where member_name = #{member_name} and member_phone = #{member_phone} ]]>
	</select>



 <select id="pwCheck"
            parameterType="com.multi.shoes4jo.vo.MemberVO"
            resultType="java.lang.Integer">
<![CDATA[
    select
        count(*)
    from
        shoes_4jo.member
    where
        member_name = #{member_name}
    and
        member_phone = #{member_phone}
    and
        member_id = #{member_id}
]]>
    </select>

    <update id="pwUpdate"
            parameterType="com.multi.shoes4jo.vo.MemberVO">
        UPDATE
        shoes_4jo.member
        SET
        member_pw = #{member_pw}
        where
        member_name = #{member_name}
        and
        member_phone = #{member_phone}
        and
        member_id = #{member_id}
    </update>

</mapper>