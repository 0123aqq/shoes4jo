<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
         
         
<!-- 애플리케이션의 이름을 지정합니다. -->
<display-name>suiteCare</display-name>

<!-- 웹 애플리케이션 시작 시 표시되는 기본 파일 목록을 지정합니다. -->
<welcome-file-list>
	<welcome-file>index.jsp</welcome-file>
	<welcome-file>login.jsp</welcome-file>
	<welcome-file>index.htm</welcome-file>
	<welcome-file>default.jsp</welcome-file>
	<welcome-file>default.htm</welcome-file>
</welcome-file-list>

<!-- 모든 서블릿과 필터에 의해 공유되는 (빈 설정 파일)루트 스프링 컨테이너의 정의를 제공합니다.
(웹 어플리케이션의 root-spring-context.xml파일 위치 정의해줌) -->
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/root-context.xml</param-value>
</context-param>

<!-- 모든 서블릿 및 필터가 공유하는 스프링 컨테이너를 생성합니다. 
listener는 웹 어플리케이션의 시작과 종료를 처리하는 동안 자동으로 호출되는 웹 어플리케이션 이벤트 리스너를 
등록하는 태그이다. spring context를 초기화하고 해제하는 ContextLoaderListener를 사용함-->
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener
	</listener-class>
</listener>

<!-- 웹 어플리케이션에 사용되는 appServlet이라는 이름의 서블릿을 정의하고 DispatcherServlet 클래스를 씀.
contextConfigLocation 초기 매개변수를 사용해서 servlet context 설정 파일 위치를 지정한다.
-->
<servlet>
	<servlet-name>appServlet</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet
	</servlet-class>
	<!-- 이 서블릿의 구성 위치를 지정합니다. -->
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/appServlet/servlet-context.xml
		</param-value>
	</init-param>
	<!-- 웹 애플리케이션이 시작될 때 서블릿이 로드됩니다. -->
	<load-on-startup>1</load-on-startup>
</servlet>

<!-- appServlet(요청 처리 로직 포함되어서 웹 요청 처리하는데 사용됨) 서블릿의 매핑을 설정하고 기본 URL 패턴을 사용합니다. -->
<!-- appServlet이 MVC프레임워크 핵심 구성 요소인 DispatcherServlet클래스 사용해서
요청에 따라 맞는 컨트롤러 찾고, 컨트롤러가 처리한 후에 적절한 뷰에 전달해줌.
그리고 servlet-mapping태그 사용해서 appServlet의 URL패턴 지정함(모든 요청을 처리하도록 /사용) -->
<servlet-mapping>
	<servlet-name>appServlet</servlet-name>
	<url-pattern>/</url-pattern>
</servlet-mapping>

<!-- 인코딩 필터를 정의하고 문자 인코딩 필터 클래스(별도로 encodingFilter클래스 안만들어도 됨
이게 스프링에서 제공하는 기본 문자 인코딩 필터 클래스임 요청과 응답 문자 인코딩 처리하는데 사용 됨.
Character~~객체 생성하고 인코딩 작업 해줌)를 사용합니다. -->
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>
		org.springframework.web.filter.CharacterEncodingFilter
	</filter-class>
	<!-- 필터의 인코딩을 UTF-8로 설정하고 강제 인코딩을 사용합니다. -->
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<!-- 위에서 지정한 encodingFilter 이름을 모든 URL 패턴에 적용합니다. -->
<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

</web-app>
